Въпрос 1:  Обяснете какво прави методът Dequeue()?

Правилният отговор е: премахва и връща елемента от началото на опашката


Въпрос 2:  Ресторант

         Продукти

          Общ преглед


Правилният отговор е:


public class Product

{

    public string Name { get; set; }

    public Product Next { get; set; }



    public override string ToString()

    {

        return $"Product {Name}";

    }

}





//Fridge.cs



public class Fridge

{

    public Product Head { get; set; }

    public Product Tail { get; set; }

    public int Count { get; set; }



    public void Add(Product product)

    {

        if (Head == null)

        {

            Head = product;

            Tail = product;

        }

        else

        {

            Tail.Next = product;

            Tail = product;

        }

        Count++;

    }



    public string RemoveProductByIndex(int index)

    {

        if (index < 0 || index >= Count)

        {

            return null;

        }



        Product current = Head;

        Product previous = null;



        for (int i = 0; i < index; i++)

        {

            previous = current;

            current = current.Next;

        }



        if (previous == null)

        {

            Head = current.Next;

        }

        else

        {

            previous.Next = current.Next;

        }



        if (current == Tail)

        {

            Tail = previous;

        }



        Count--;

        return current.Name;

    }



    public string RemoveProductByName(string name)

    {

        Product current = Head;

        Product previous = null;



        while (current != null)

        {

            if (current.Name == name)

            {

                if (previous == null)

                {

                    Head = current.Next;

                }

                else

                {

                    previous.Next = current.Next;

                }



                if (current == Tail)

                {

                    Tail = previous;

                }



                Count--;

                return current.Name;

            }



            previous = current;

            current = current.Next;

        }



        return null;

    }



    public bool CheckProductIsInStock(string name)

    {

        Product current = Head;



        while (current != null)

        {

            if (current.Name == name)

            {

                return true;

            }



            current = current.Next;

        }



        return false;

    }



    public string[] CookMeal(int startIndex, int endIndex)

    {

        List<string> names = new List<string>();



        if (startIndex < 0 || startIndex >= Count)

        {

            return names.ToArray();

        }



        if (endIndex < startIndex)

        {

            return names.ToArray();

        }



        Product current = Head;

        int currentIndex = 0;



        while (current != null && currentIndex < startIndex)

        {

            current = current.Next;

            currentIndex++;

        }



        while (current != null && currentIndex <= endIndex)

        {

            names.Add(current.Name);

            current = current.Next;

            currentIndex++;

        }


        return names.ToArray();

    }

}


Въпрос 3:  Даден е следния програмен фрагмент:

public class CustomArrayList
{
      private object[] arr; 
      private int count; 
      public int Count { get { return count; } }
 
      private static readonly int INITIAL_CAPACITY = 4;
 
      public CustomArrayList()
      {
            arr = new object[INITIAL_CAPACITY];
            count = 0;
      }
      public void Add(object item)
      {

      }

}


Правилният отговор е:

public void Add(T element)
        {
            if(this.Length == this.Capacity)
            {
                this.Capacity *= 2;
                T[] temp = new T[this.Capacity];
                for (int i = 0; i < items.Length; i++)
                {
                    temp[i] = items[i];
                }
                temp[this.Length] = element;
                items = temp;
                this.Length++;
            }
            else
            {
                items[this.Length] = element;
                this.Length++;
            }
        }




Въпрос 4:  Имате следния фрагмент код: class  CustomStack<T>
Каква реализация на списъчна структура от данни представлява този код? Обобщете отговора си и напишете кратко обяснение, защо?


Правилният отговор е:

Динамична имплементация на стек. Защото в класа е деклариран друг клас, наречен Node(възел). 
Този клас ни служи като елемент (обект), който да пази стойността на елемента, който добавяме в стека(пропъртито Value) и също така съдържа и елемент отново от
тип Node (PrevNode), който ще служи като указател към следващия постъпил елемент в стека. В този случай винаги имаме достъп до първия нод (възел) в стека,
защото правилото при стека е първи влиза - първи излиза. 
По този начин реализираме свързан стек или използваме динамична имплементация, за да създадем наша собствена списъчна структура от данни - стек.



Въпрос 5: Имате даден следния код:

List<int> list = Console.ReadLine()
                .Split()
                .Select(int.Parse)
                .ToList();
            int currValue = list[0];
            int maxValue = currValue;
            int currCount = 1;
            int maxCount = 1;
            int counter = 1;
            for (int i = 1; i < list.Count; i++)
            {
                if (currValue - counter == list[i])
                {
                    currCount++;
                    counter++;
                    if (currCount > maxCount)
                    {
                        maxCount = currCount;
                        maxValue = currValue;
                    }

                }
                else
                {
                    currCount = 1;
                    currValue = list[i];
                    counter = 1;
                }

            }
            Console.WriteLine();
            Console.WriteLine(maxCount);




Правилният отговор е:  Свържете към намирането на коя от следните подредици съответства: [най‑дълга подредица от намаляващи числа]




Въпрос 6: Имате даден следния код:

List<int> list = Console.ReadLine()
                .Split()
                .Select(int.Parse)
                .ToList();
            int currValue = list[0];
            int maxValue = currValue;
            int currCount = 1;
            int maxCount = 1;
            int counter = 1;
            for (int i = 1; i < list.Count; i++)
            {
                if(currValue + counter == list[i])
                {
                    currCount++;
                    counter++;
                    if(currCount > maxCount)
                    {
                        maxCount = currCount;
                        maxValue = currValue;
                    }
                    
                }
                else
                {
                    currCount = 1;
                    currValue = list[i];
                    counter = 1;
                }

            }
            Console.WriteLine();
            Console.WriteLine(maxCount);


Правилният отговор е:    Свържете към намирането на коя от следните подредици съответства: [най‑дълга подредица от нарастващи числа]




Въпрос 7:  Дайте пример с C# код, за метод който да сортира  елементите от списъка List<int> list = new List<int>() { 12, 8, 10, 2, 9, 6, 1}; 
посредством алгоритъма за сортиране  чрез пряка селекция. 


Правилният отговор е: 


public static void SelectionSort(List<int> list)
        {
            for (int index = 0; index < list.Count; index++)
            {
                int min = index;
                for (int current = index + 1; current < list.Count; current++)
                {
                    if(list[current] < list[min])
                    {
                        min = current;
                    }
                }

                Swap(list, index, min);
            }
            
        }

private static void Swap(List<int> list, int index, int min)

        {

            int temp = list[index];

            list[index] = list[min];

            list[min] = temp;

        }
        
        
        
        
     Въпрос 8:  Имате даден следния програмен фрагмент:  public T Pop(int index)
     
     
     Правилният отговор е:  
        
Грешката в кода е, че методът Pop(int index) получава цяло число, което вътре в метода се използва за намиране на елемента в масива и премахването на този елемент. 
По дефиниция линейната структура стек не работи така. Правилото за работа със стек е "първи влиза - първи излиза". 
Нямаме право да достъпваме елементите по индекс, освен само и единствено за четене.
Когато правим имплементацията за премахване на елемент от стек винаги премахваме последния елемент - в случая трябва да използваме броя на елементите 
(Count) на мястото на параметъра Index, за да премахнем последния елемент от масива в класа.
И самия метод Pop() не трябва да приема параметър.        
        
 
 
 
 Въпрос 9:  Имате изброени методи за структура от данни, която има поведение от тип „първи влязъл, първи излязъл“. Свържете правилно всеки метод с неговото действие.



 Правилният отговор е:  
 
 
 Правилният отговор е: 
 Dequeue() → премахва и връща елемента от началото, 
 Enqueue → добавя елемент в края на опашката, 
 Peek() → връща елемента от началото без да го изтрива




Въпрос 10:  Посочете кое от следните твърдения се отнася за опашка?


Правилният отговор е: структура от данни, която има поведение от тип „първи влязъл, първи излиза“



Въпрос 11:  Опишете какво прави методът Pop()?

Правилният отговор е: премахва най-горния елемент в стека


Въпрос 12 :  Посочете кой от следните примери показва добавяне на елемент към стек в C#, който е създаден по следния начин:

Stack s = new Stack();


Правилният отговор е: s.Push(325);



Въпрос 13:  Избройте три операции (методи), които можете да прилагате върху стек.



Правилният отговор е:


Push(T item)

Pop()

Peek()


Въпрос 14:  Посочете за коя от колекциите в С# е вярно следното твърдение: „Последователно съхранение на елементите и потребителя има пълен контрол
върху реда на елементите“?


Правилният отговор е: List



Въпрос 15:  Избройте три операции (методи), които можете да прилагате върху опашка.


Правилният отговор е:

Enqueue (T item)

Dequeue ()

Peek ()


Въпрос 16:  Дефинирайте понятието сложност на алгоритъм.


Правилният отговор е:


Сложността на алгоритъм представлява количеството на ресурси (време и/или памет), които са необходими за изпълнение на алгоритъма 
във връзка с размера на входните данни. Сложността може да бъде измерена като времева сложност и като пространствена сложност.

Времева сложност: Определя колко операции са необходими за изпълнение на алгоритъма като функция от размера на входните данни (обикновено означавано с 'n'). 
Тя показва как изпълнението на алгоритъма се забавя с увеличаване на размера на входните данни.

Пространствена сложност: Оценява количеството на памет, което алгоритъм използва като функция от размера на входните данни (също 'n'). 
Тя показва колко памет се нуждае алгоритъмът от, за да се изпълни успешно, в зависимост от размера на входните данни.

Сложността на алгоритъма се анализира обикновено чрез "О-нотация" (О-notation), която определя горна граница на времевата или пространствената сложност в
най-лошия случай. Например, алгоритъм с времева сложност O(n^2) означава, че времето за изпълнение на алгоритъма ще расте квадратично
спрямо увеличаването на размера на входните данни.



Въпрос 17:  Посочете вярното твърдение за държавната списъчна структура в .NET - Stack<T>


Правилният отговор е:


Използва динамична реализация [НЕ].

Абстрактната структура, която изпълнява условието "първият влязъл първи излиза". [НЕ]

Използва статичната реализация [ДА].

Абстрактна структура, която изпълнява  условието "последен влязъл – пръв излязъл" [ДА]

Можем да добавяме елементи най-отгоре и да извличаме последния добавен елемент. [ДА]

Добавените елементи се нареждат в края, а при извличане поредният елемент се взима от началото. [НЕ]

           


Въпрос 18:  Даден е следния програмен фрагмент:

 class CustomStack<T>
    {
        private class Node<T>
        {
            public T Value { get; set; }
            public Node<T> PrevNode { get; private set; }

            public Node(T value, Node<T> prev = null)
            {
                this.Value = value;
                this.PrevNode = prev;
            }
        }

        private Node<T> firstNode;
        public int Count { get; private set; }

        public void Push(T element)
        {
            
        }
}



Правилният отговор е:

  public void Push(T element)
        {
            this.firstNode = new Node<T>(element, this.firstNode);
            this.Count++;
        }
        
        
        
        
    Въпрос 19:  Обяснете какво прави методът Enqueue(T)?
    
    
    Правилният отговор е: добавя елемент в края на опашката
    
    
    
   
    
    Въпрос 20 Опишете какво прави методът Peek()?
    
    Правилният отговор е: връща най-горния елемент в стека, без да го премахва
    
    
    
    Въпрос 21:  Опишете какво прави методът Push()?
    
    
    Правилният отговор е: Добавя елемент най-горе в стека
    
    
    
    Въпрос 22:  Разработвате ново приложение за оптимизиране на процесите в работата на призводствено предприятие. 
    Трябва да приложите структура от данни, която да работи като „буфер“ срещу надхвърляне на капацитета. 
    Когато сме в рамките на призводствения капацитет, артикулите в буфера трябва да се обработят в реда, в който се добавят. 
    Обяснете коя структура от данни трябва да използвате защо бихте използвали точно нея, за да приложите такъв буфер?


Правилният отговор е: 

В опашката, артикулите се обработват в реда, в който са добавени. В частност, артикулите се добавят в края на опашката и се премахват от началото. 
Това е общоизвестно като first-in, first-out (FIFO) обработване.





Въпрос 23: Посочете кои са по-важните свойства на алгоритмите?


Правилният отговор е: всичко изброено



Въпрос 24:  Изчислете максималния брой стъпки за намиране на сбора от четните елементи в масив.
Като предполагаме, че една стъпка е една инструкция на CPU, а именно: подредби, търсения на елемент в масив, сравнения, аритметични операции.


int GetSumEven(int[] array)
{
  int sum = 0;
  for (int i = 0; i < array.Length; i++)
    if (array[i] % 2 == 0) 
        sum += array[i];
  return sum;
}


T(n) = (отговор);



Правилният отговор е:   4n+3



Въпрос 25: Избройте поне четири операции (методи), които можете да прилагате върху списък.


Правилният отговор е:  

Add(T item)

Remove(T item)

RemoveAt(int index)

Sort()

ToArray()



Въпрос 26:  Във Вашето приложение използвате опашна структура от данни, за да обработвате информацията. 
Трябва да намерите, дали даден елемент съществува в опашката, но все още не искате елемента да бъде обработван. 
Посочете коя от следващите операции за опашката ще използвате?




Правилният отговор е: contains



Въпрос 27:  Имате следния фрагмент код:  class CustomList



Правилният отговор е:


Динамична имплементация на списък. Защото в класа е деклариран друг клас, наречен Node(възел). 
Този клас ни служи като елемент (обект), който да пази стойността на елемента, който добавяме в списъка (пропъртито Element) и също така 
съдържа и елемент отново от тип Node, който ще служи като указател към следващия елемент в списъка. 
По този начин реализираме свързан списък или използваме динамична имплементация, за да създадем наша собствена списъчна структура от данни.




Въпрос 28:  Разработвате приложение, което използва структурата от данни Stack<T>. Пишете следния код:

Stack<int> processStack = new Stack<int>();

processStack.Push(50);

processStack.Push(45);

processStack.Pop();

processStack.Push(11);

processStack.Pop();

processStack.Push(7);


Правилният отговор е: 7, 50






Въпрос  29:  Дайте пример с C# код, за метод който да сортира  елементите от списъка List<int> list = new List<int>() { 12, 8, 10, 2, 9, 6, 1}; посредством 
алгоритъма за сортиране  чрез метода на мехурчето.


Правилният отговор е:

 public static void BubbleSortWithFor(List<int> list)
        {
            for (int j = 0; j <= list.Count - 2; j++)
            {
                for (int i = 0; i <= list.Count - 2; i++)
                {
                    if (list[i] > list[i + 1])
                    {
                        Swap(list, i, i + 1);
                    }
                }
            }
        }
private static void Swap(List<int> list, int index, int min)
        {
            int temp = list[index];
            list[index] = list[min];
            list[min] = temp;
        }
        
        
        

Въпрос 30:  Избройте какви линейни структури от данни познавате?


Правилният отговор е: Списъци, стекове и опашки








